"""1st migrate

Revision ID: a94fc749f07e
Revises: 
Create Date: 2024-03-09 16:50:13.440050

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a94fc749f07e"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "division",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("weight", sa.BigInteger(), nullable=False),
        sa.Column("parent_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["division.id"], name=op.f("fk_division_parent_id_division")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_division")),
        sa.UniqueConstraint("name", name=op.f("uq_division_name")),
    )
    op.create_table(
        "role",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),
        sa.UniqueConstraint("name", name=op.f("uq_role_name")),
    )
    op.create_table(
        "user",
        sa.Column("username", sa.String(length=256), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("email", sa.String(length=256), nullable=False),
        sa.Column("full_name", sa.String(length=256), nullable=True),
        sa.Column("weight", sa.Integer(), nullable=True),
        sa.Column("phone", sa.String(length=256), nullable=True),
        sa.Column("telegram_id", sa.String(length=256), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("email", name=op.f("uq_user_email")),
        sa.UniqueConstraint("phone", name=op.f("uq_user_phone")),
        sa.UniqueConstraint("telegram_id", name=op.f("uq_user_telegram_id")),
        sa.UniqueConstraint("username", name=op.f("uq_user_username")),
    )
    op.create_table(
        "group",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("leader_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["leader_id"], ["user.id"], name=op.f("fk_group_leader_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_group")),
        sa.UniqueConstraint("name", name=op.f("uq_group_name")),
    )
    op.create_table(
        "task",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "new",
                "in_work",
                "waiting",
                "closed",
                name="taskstatus",
                native_enum=False,
                length=20,
            ),
            nullable=False,
        ),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column("worker_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"], ["user.id"], name=op.f("fk_task_author_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"], ["user.id"], name=op.f("fk_task_worker_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_task")),
        sa.UniqueConstraint("name", name=op.f("uq_task_name")),
    )
    op.create_table(
        "ticket",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "new",
                "in_work",
                "closed",
                name="ticketstatus",
                native_enum=False,
                length=20,
            ),
            nullable=False,
        ),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column("group_id", sa.BigInteger(), nullable=True),
        sa.Column("worker_id", sa.BigInteger(), nullable=False),
        sa.Column("parent_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"], ["user.id"], name=op.f("fk_ticket_author_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["group.id"], name=op.f("fk_ticket_group_id_group")
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["ticket.id"], name=op.f("fk_ticket_parent_id_ticket")
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"], ["user.id"], name=op.f("fk_ticket_worker_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ticket")),
        sa.UniqueConstraint("name", name=op.f("uq_ticket_name")),
    )
    op.create_table(
        "message",
        sa.Column("body", sa.Text(), nullable=False),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column("ticket_id", sa.BigInteger(), nullable=True),
        sa.Column("task_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"], ["user.id"], name=op.f("fk_message_author_id_user")
        ),
        sa.ForeignKeyConstraint(
            ["task_id"], ["ticket.id"], name=op.f("fk_message_task_id_ticket")
        ),
        sa.ForeignKeyConstraint(
            ["ticket_id"], ["ticket.id"], name=op.f("fk_message_ticket_id_ticket")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_message")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("message")
    op.drop_table("ticket")
    op.drop_table("task")
    op.drop_table("group")
    op.drop_table("user")
    op.drop_table("role")
    op.drop_table("division")
    # ### end Alembic commands ###
